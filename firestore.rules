rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // User deletion should be handled by admin only
    }

    // Videos collection
    match /videos/{videoId} {
      allow read: if isAuthenticated();
      allow create: if isTeacher();
      allow update: if isTeacher() && resource.data.teacherId == request.auth.uid;
      allow delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
    }

    // Transcripts collection
    match /transcripts/{transcriptId} {
      allow read: if isAuthenticated();
      allow create, update: if isTeacher();
      allow delete: if isTeacher() && 
        get(/databases/$(database)/documents/videos/$(resource.data.videoId)).data.teacherId == request.auth.uid;
    }

    // Annotations collection
    match /annotations/{annotationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Analytics collection (aggregated data)
    match /analytics/{docId} {
      allow read: if isTeacher();
      allow write: if false; // Analytics should be written by backend only
    }
  }
}
